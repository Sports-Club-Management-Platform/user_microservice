name: CI Pipeline

on:
  push:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: [3.12]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create .env file
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "USER_POOL_ID=${{ secrets.USER_POOL_ID }}" >> .env
          echo "COGNITO_USER_CLIENT_ID=${{ secrets.COGNITO_USER_CLIENT_ID }}" >> .env
          echo "COGNITO_USER_CLIENT_SECRET=${{ secrets.COGNITO_USER_CLIENT_SECRET }}" >> .env
          echo "COGNITO_TOKEN_ENDPOINT=${{ secrets.COGNITO_TOKEN_ENDPOINT }}" >> .env
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Setup poetry
        run: |
          pip install --upgrade pip setuptools
          pip install poetry

      - name: Install tox and other dependencies
        run: poetry install --no-interaction

      - name: Setup Docker and bring up services
        run: docker compose -f test.compose.yml up -d

      - name: Run tests using tox
        run: poetry run tox -e coverage

      - name: Cleanup Docker containers
        run: docker compose -f test.compose.yml down

      - name: Delete .env file
        run: rm .env

      - name: Create .env.prod file
        run: |
          echo "MYSQL_URL=${{ secrets.MYSQL_URL_PROD }}" >> .env.prod
          echo "REDIRECT_URI=${{ secrets.REDIRECT_URI_PROD }}" >> .env.prod
          echo "AWS_REGION=${{ secrets.AWS_REGION_PROD }}" >> .env.prod
          echo "USER_POOL_ID=${{ secrets.USER_POOL_ID_PROD }}" >> .env.prod
          echo "COGNITO_USER_CLIENT_ID=${{ secrets.COGNITO_USER_CLIENT_ID_PROD }}" >> .env.prod
          echo "COGNITO_USER_CLIENT_SECRET=${{ secrets.COGNITO_USER_CLIENT_SECRET_PROD }}" >> .env.prod
          echo "COGNITO_TOKEN_ENDPOINT=${{ secrets.COGNITO_TOKEN_ENDPOINT_PROD }}" >> .env.prod
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ vars.AWS_ECR_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f prod.dockerfile .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Trigger CD Pipeline
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.ACTIONS_PAT }}
          repository: Sports-Club-Management-Platform/control-room
          event-type: update-user-microservice
