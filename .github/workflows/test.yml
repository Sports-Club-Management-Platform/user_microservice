name: Test
on:
  workflow_dispatch:
  push:
    branches: [main, SCRUM-5-User-Registration]
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.12]
    steps:
      - name: Set environment variables
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          USER_POOL_ID: ${{ secrets.USER_POOL_ID }}
          COGNITO_USER_CLIENT_ID: ${{ secrets.COGNITO_USER_CLIENT_ID }}
          COGNITO_USER_CLIENT_SECRET: ${{ secrets.COGNITO_USER_CLIENT_SECRET }}
          COGNITO_TOKEN_ENDPOINT: ${{ secrets.COGNITO_TOKEN_ENDPOINT }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          REDIRECT_URI: ${{ secrets.REDIRECT_URI }}
        run: |
          echo "Environment variables set successfully"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Print MySQL environment variables
        run: |
          echo "MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}"
          echo "MYSQL_USER: ${{ secrets.MYSQL_USER }}"
          echo "MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}"
          echo "MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}"

      - name: Setup poetry
        run: |
          pip install --upgrade pip setuptools
          pip install poetry

      - name: Install tox and other dependencies
        run: poetry install --no-interaction

      - name: Setup Docker and bring up services
        run: docker compose -f test.compose.yml up -d

      - name: Run tests using tox
        run: poetry run tox -e coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_OPTS: -Dsonar.python.coverage.reportPaths=coverage.xml

      - name: Get DB logs on failure
        if: failure()
        run: docker logs api-db-1

      - name: Cleanup Docker containers
        run: docker compose -f test.compose.yml down
